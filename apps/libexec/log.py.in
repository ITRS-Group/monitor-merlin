import os, sys, subprocess, tempfile
import compound_config as cconf

nagios_cfg = '@naemon_cfg@'
archive_dir = False

class SubcommandException(Exception):
	pass

# run the import program
def cmd_import(args):
	"""[--fetch] [--help]
	Runs the external log import helper.
	"""
	since = ''
	fetch = False
	i = 0
	sort_args = []
	for arg in args:
		if arg.startswith('--incremental='):
			since = arg[14:]
		elif arg == '--truncate-db':
			since = '1'
		elif arg == '--fetch':
			fetch = True
			args.pop(i)
		elif arg == '--tempdir=':
			sort_args.append(arg)

		i += 1

	args.insert(0, '--nagios-cfg=' + nagios_cfg)

	if not '--list-files' in args:
		db_user = mconf.dbopt.get('user', 'merlin')
		db_pass = mconf.dbopt.get('pass', 'merlin')
		db_type = mconf.dbopt.get('type', 'mysql')
		args.insert(0, '--db-user=%s' % db_user)
		args.insert(0, '--db-pass=%s' % db_pass)
		args.insert(0, '--db-type=%s' % db_type)
		conn_str = mconf.dbopt.get('conn_str', False)
		if conn_str != False:
			args.insert(0, '--db-conn-str=%s' % mconf.dbopt.get('conn_str', False))
		else:
			db_name = mconf.dbopt.get('name', 'merlin')
			db_host = mconf.dbopt.get('host', 'localhost')
			db_port = mconf.dbopt.get('port', False)
			args.insert(0, '--db-host=%s' % db_host)
			args.insert(0, '--db-name=%s' % db_name)
			if db_port != False:
				args.insert(0, '--db-port=%s' % db_port)

		if mconf.num_nodes['poller'] or mconf.num_nodes['peer']:
			import_args = [merlin_dir + '/import'] + args
			retcode = subprocess.call(import_args, stdout=sys.stdout.fileno(), stderr=sys.stderr.fileno())
			if retcode:
				print("Failed to run log import subcommand")
				print(("  %s" % ' '.join(import_args)))
				raise SubcommandException()
			return True

	app = merlin_dir + '/import'
	try:
		ret = subprocess.call([app] + args, stdout=None, stderr=sys.stderr)
		if ret < 0:
			print(("The import program was killed by signal %d" % ret))
	except OSError as e:
		print(("An exception was thrown running the import program: %s" % e.strerror))
		ret = -1
	return ret


# run the showlog program
def cmd_show(args):
	"""[--help]
	Runs the showlog helper program. Arguments passed to this command
	will get sent to the showlog helper. Use 'mon log show --help' for
	details.
	--help will show a more extensive list of options
	"""
	app = merlin_dir + "/showlog"
	ret = os.spawnv(os.P_WAIT, app, [app] + args)
	if ret < 0:
		print(("The showlog helper was killed by signal %d" % ret))
	return ret

def cmd_purge(args):
	"""[--remove-older-than=<difference>]
	Removes data no longer in use.

	If --remove-older-than is specified, also removes log files and database
	entries older than <difference>. The difference is specified as a number,
	followed by a unit - 'y' for year, 'm' for month, 'w' for week, 'd' for day.
	For instance, to delete all logs older than 1 year:
		mon log purge --remove-older-than=1y
	"""
	import time, glob, merlin_db
	# units rounded upwards
	units = {'y':31622400, 'm':2678400, 'w':604800, 'd':86400}
	if os.path.exists('/opt/monitor/op5/pnp/perfdata/.trash'):
		subprocess.call(['find', '/opt/monitor/op5/pnp/perfdata/.trash', '-mindepth', '1', '-delete'])
	oldest = False
	for arg in args:
		if arg.startswith('--remove-older-than='):
			if not arg[-1] in list(units.keys()):
				print(("Invalid unit: " + arg[-1]))
				return False
			try:
				diff = float(arg[20:-1]) * units[arg[-1]]
			except ValueError:
				print("Invalid number: " + arg[20:-1])
				return False
			oldest = time.mktime(time.gmtime()) - diff
	if not oldest:
		return True
	conn = merlin_db.connect(mconf)
	dbc = conn.cursor()
	dbc.execute('DELETE FROM notification WHERE end_time < %s', [int(oldest)])
	dbc.execute('DELETE FROM report_data WHERE id NOT IN (SELECT id FROM (SELECT MAX(id) AS id FROM report_data WHERE timestamp < %s GROUP BY service_description, host_name) as tbl) AND timestamp < %s', [int(oldest),int(oldest)])
	conn.commit()
	return purge_naemon_log_files(oldest)

def purge_naemon_log_files(oldest):
	import time, glob
	global archive_dir
	logformat = {"naemon": "naemon.log-%Y%m%d", "nagios": "nagios-%m-%d-%Y-%H.log"}

	# if the global variable wasn't set yet, we try to get it from the
	# naemon config file.
	if not archive_dir:
		if os.access(nagios_cfg, os.R_OK):
			comp = cconf.parse_nagios_cfg(nagios_cfg)
			archive_dir = comp.log_archive_path

	# Error out if we still didn't manage to find the path
	if not archive_dir:
		print("ERROR: Unable to find log archieve path")
		return 1

	for key in logformat:
		for log in glob.glob("%s/%s*" % (archive_dir, key)):
			try:
				if time.mktime(time.strptime(log, "%s/%s" % (archive_dir, logformat[key]))) < oldest:
					os.remove(log)
			except (ValueError):
				# File doesn't match our desired pattern, so just leave it
				pass
	return True
