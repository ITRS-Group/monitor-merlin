#!/usr/bin/env python


import os
import io
import sys
import subprocess as sp

from multiprocessing import Pool
from compound_config import parse_nagios_cfg
from merlin_apps_utils import prettyprint_docstring

obj_index = {}


def idx_get(otype):
    global obj_index
    if otype not in obj_index.keys():
        obj_index[otype] = 0
    obj_index[otype] += 1
    return obj_index[otype]


last_changed = 0
nagios_cfg = '@naemon_cfg@'
naemon_cfg = nagios_cfg
object_cfg_files = {}
object_prefix = ''
object_cache = '/opt/monitor/var/objects.cache'
obj_files = []
config_dir = None


def module_init(args):
    global config_dir
    global cache_dir
    rem_args = []
    for arg in args:
        if arg.startswith('--use-helper='):
            continue
        if arg == '--use-helper':
            continue
        if arg.startswith('--cache-dir='):
            config_dir = arg.split('=', 1)[1]
            continue
        rem_args.append(arg)
    if not config_dir:
        config_dir = '%s/config' % cache_dir
    return rem_args


# grab object configuration files from a cfg_dir directive
def recurse_grab_object_cfg_files(v, basepath=''):
    obj_files = []
    if v[0] != '/':
        v = basepath + '/' + v
    f_ary = os.listdir(v)
    for f in f_ary:
        path = '%s/%s' % (v, f)
        if os.path.isdir(path):
            obj_files += recurse_grab_object_cfg_files(path, '')
        elif os.path.isfile(path) and f[-4:] == '.cfg':
            obj_files.append(path)

    return obj_files


def grab_nagios_cfg(nagios_cfg_path):
    global force_include_commands
    global object_cache

    obj_files = []
    comp = parse_nagios_cfg(nagios_cfg_path)
    basepath = os.path.dirname(os.path.abspath(nagios_cfg_path))
    for (k, v) in comp.params:
        if k == 'cfg_file':
            obj_files.append(v)
        elif k == 'cfg_dir':
            obj_files += recurse_grab_object_cfg_files(v, basepath + '/')

    return obj_files


def update_last_changed(path):
    global last_changed
    st = os.stat(path)
    if st and st.st_mtime > last_changed:
        last_changed = st.st_mtime


def usage(msg=False):
    if msg:
        print(msg)

    sys.exit(1)


def oconf_helper(args):
    global merlin_dir
    app = merlin_dir + '/oconf'
    have_nagios_cfg = False
    for arg in args:
        if arg.startswith('--nagios-cfg'):
            have_nagios_cfg = True
            break
    if not have_nagios_cfg:
        args += ['--nagios-cfg=' + nagios_cfg]

    ret = os.spawnv(os.P_WAIT, app, [app] + args)
    if ret < 0:
        print("Helper %s was killed by signal %d" % (app, ret))
    return ret


def cmd_hash(args):
    """
    Prints an SHA-1 hash of the running configuration.
    """
    sys.exit(oconf_helper(['hash'] + args))


def cmd_changed(args):
    """
    Prints last modification time of all object configuration files.
    """
    sys.exit(oconf_helper(['last-changed'] + args))


def cmd_files(args):
    """
    Prints the configuration files in alphabetical order.
    """
    sys.exit(oconf_helper(['files'] + args))


def get_ssh_key(node):
    ssh_key = node.options.get('oconf_ssh_key', False)
    if ssh_key and os.path.isfile(ssh_key):
        return ssh_key
    home = os.getenv('HOME', False)
    if not home:
        return False
    sshdir = home + "/.ssh"
    if not os.path.isdir(sshdir):
        return False

    # Try various keyfiles in the preferred order.
    # If we find one, we simply return 'true', since
    # ssh will look for the keys there too and may
    # choose one with better encryption (or whatever).
    for keyfile in ['id_rsa', 'id_dsa', 'identity']:
        if os.path.isfile(sshdir + '/' + keyfile):
            return True

    # no key seems to exist
    return False


def restart_node(node):
    out = io.StringIO()
    return (node.ctrl("sudo mon restart", out=out, err=out),
            out.getvalue().rstrip('\n'))


def cmd_fetch(args):
    """\
    [--dryrun] [--sync] [--verbose] <node>
    Fetch split configuration from a master node.

    If the --sync option is used the files specifed in the sync {...} section
    in the merlin configuration will be fetched as well.

    SSH keys needs to be set up to use this without admin supervision.

    NOTE: A configuration variable called "fetch_name" is
    required in the object_config section of merlin.cfg on the
    poller. The variable should be set to the name of the poller,
    as seen by the master.
"""
    dryrun = False
    sync = False
    node = None
    verbose = False

    for arg in args:
        if arg == '--dryrun':
            dryrun = True
        elif arg == '--sync':
            sync = True
        elif arg == '--verbose':
            verbose = True
        elif arg.startswith('--'):
            prettyprint_docstring(
                'fetch', cmd_fetch.__doc__, 'Unknown argument: %s' % arg
            )
            sys.exit(1)
        else:
            # arg must be name of node
            node = mconf.configured_nodes.get(arg)
            if not node:
                prettyprint_docstring(
                    'fetch', cmd_fetch.__doc__, 'Unknown node: %s' % arg
                )
                sys.exit(1)

    if not node:
        prettyprint_docstring('fetch', cmd_fetch.__doc__, 'No node given')
        sys.exit(1)

    # Set oconf options
    oconf_ssh_port = node.options.get("oconf_ssh_port")
    oconf_fetch = node.options.get("oconf_fetch")
    oconf_fetch_name = node.options.get("oconf_fetch_name")
    oconf_ssh_user = node.options.get('oconf_ssh_user')
    oconf_ssh_key = node.options.get('oconf_ssh_key')
    if not oconf_fetch_name:
        prettyprint_docstring(
            'fetch', cmd_fetch.__doc__, 'fetch_name needs to be set'
        )
        sys.exit(1)

    # List of tuples (source, destination)
    files_to_fetch = []
    # Sync local configuration from the master
    config_source = "{}:{}".format(
            node.address, "@cachedir@/config/" + oconf_fetch_name + ".cfg"
    )
    config_destination = "/opt/monitor/etc/oconf/from-master.cfg"
    files_to_fetch.append((config_source, config_destination))

    if sync:
        for (source, destination) in node.paths_to_sync.items():
            # If no destination is given the value will be True
            # in that case we assume that source == destination
            if destination is True:
                destination = source
            files_to_fetch.append(
                ("{}:{}".format(node.address, source), destination)
            )

    errors = 0
    for (source, destination) in files_to_fetch:
        return_code, output = rsync_file_from_remote(
            source, destination, oconf_ssh_user,
            oconf_ssh_key, oconf_ssh_port, dryrun
        )
        errors += return_code
        if output:
            print output

    if errors != 0:
        print "Errors occured while synchronizing files!"
        sys.exit(1)
    sys.exit(0)


# Copied and modifed from sync_files
def rsync_file_from_remote(
    source, destination, ssh_user=None, ssh_key=None, ssh_port=None, dryrun=False
):
    """ Rsyncs a file from a remote system using ssh as transport
        Expects source to be of the form, <host>:<path>
    """
    global cache_dir
    return_code = 0
    out = io.StringIO()

    # Use compression by default
    ssh_cmd = 'ssh -C'

    ssh_user = None
    # if we're not running from console, we need to disable
    # keyboard-interactive authentication to avoid hanging
    if not os.isatty(sys.stdout.fileno()):
        ssh_cmd += ' -o KbdInteractiveAuthentication=no'
    if ssh_key:
        ssh_cmd += ' -i ' + ssh_key
    if ssh_user:
        ssh_cmd += ' -l ' + ssh_user
    if ssh_port:
        ssh_cmd += ' -p ' + ssh_port

    if ssh_user:
        source = "{}@{}".format(ssh_user, source)

    # Copy recursively in 'archive' mode
    base_rsync_cmd = [
        'rsync', '-aotzc', '--delete', '-b',
        '--backup-dir=%s/backups' % cache_dir
    ]

    rsync_cmd = base_rsync_cmd + ['-e', ssh_cmd, source, destination]
    if dryrun:
        out.write(u'rsync command: %s\n' % ' '.join(rsync_cmd))
    else:
        p = sp.Popen(rsync_cmd, stdout=sp.PIPE, stderr=sp.PIPE)
        output, error = p.communicate()
        output and out.write(u'%s\n' % output)
        error and out.write(u'%s\n' % error)
        return_code = p.returncode

    return (return_code, out.getvalue().rstrip('\n'))


def sync_files((node, ssh_user, ssh_key, files_to_sync, dryrun)):

    global cache_dir
    retval = True
    out = io.StringIO()

    # Use compression by default
    ssh_cmd = 'ssh -C'

    # if we're not running from console, we need to disable
    # keyboard-interactive authentication to avoid hanging
    if not os.isatty(sys.stdout.fileno()):
        ssh_cmd += ' -o KbdInteractiveAuthentication=no'
    if ssh_key:
        ssh_cmd += ' -i ' + ssh_key
    if ssh_user:
        ssh_cmd += ' -l ' + ssh_user

    # Copy recursively in 'archive' mode
    base_rsync_args = ['-aotzc', '--delete',
                       '-b', '--backup-dir=%s/backups' % cache_dir]

    for (src, dest) in files_to_sync.items():

        address_dest = "%s:%s" % (node.address, dest)
        if ssh_user:
            address_dest = ssh_user + '@' + address_dest
        args = base_rsync_args + [src, '-e', ssh_cmd, address_dest]
        if dryrun:
            out.write(u'rsync command: %s\n' % ' '.join(['rsync'] + args))
        else:
            p = sp.Popen(['rsync'] + args, stdout=sp.PIPE, stderr=sp.PIPE)
            output, error = p.communicate()
            output and out.write(u'%s\n' % output)
            error and out.write(u'%s\n' % error)
            if p.returncode != 0:
                retval = False

    return (retval, out.getvalue().rstrip('\n'))


def cmd_push(args):
    """\
    --no-restart [--push=oconf,extras,bsm] [--dryrun] [<node1> <node2> <nodeN>]
    Sends object configuration to all peers and pollers, restarting
    those that receive a configuration update.

    SSH keys needs to be set up to use this without admin supervision.
    """
    global cache_dir
    global mconf
    wanted_nodes = []
    restart = True
    push_items = ['oconf', 'extras', 'bsm']
    dryrun = False

    for arg in args:
        if arg == '--no-restart':
            restart = False
            continue
        if arg.startswith('--push='):
            push_items = arg.split('=', 1)[1].split(',')
            continue
        if arg == '--dryrun' or arg == '-n':
            dryrun = True
            restart = False
            continue
        node = mconf.configured_nodes.get(arg)
        if node:
            wanted_nodes.append((node.name, node))
            continue
        prettyprint_docstring('push', cmd_push.__doc__,
                              'Unknown argument: %s' % arg)
        sys.exit(1)

    if not os.getuid() and 'oconf' in push_items:
        print """\
  Using 'mon oconf push' to push object config as root is prohibited
  Use 'mon oconf push --push=extras' to safely push items as root"""
        sys.exit(1)

    # if no nodes were explicitly configured, get all nodes
    if not len(wanted_nodes):
        wanted_nodes = mconf.configured_nodes.items()
        # remove nodes with connect = no
        for name, node in wanted_nodes:
            if isinstance(node.connect, basestring) and node.connect.lower() == "no":
                wanted_nodes.remove((name, node))
                print 'Not pushing to node: %s, as connect = no' % name

    sync_list = []
    for name, node in wanted_nodes:

        files_to_sync = {}
        ssh_user = node.options.get('oconf_ssh_user', None)
        ssh_key = node.options.get('oconf_ssh_key', None)

        if 'oconf' in push_items:
            oconf_file = '%s/%s.cfg' % (config_dir, name)
            if node.ntype == 'poller':
                if not os.path.exists(oconf_file):
                    print 'Cannot push to poller %s ' \
                            'because %s does not exist' % (name, oconf_file)
                    wanted_nodes.remove((name, node))
                    continue
                source = oconf_file
                default_dest = '/opt/monitor/etc/oconf/from-master.cfg'
            else:
                source = node.options.get('oconf_source', '/opt/monitor/etc')
                default_dest = '/opt/monitor'

            oconf_dest = node.options.get('oconf_dest', default_dest)
            files_to_sync[source] = oconf_dest

        if 'extras' not in push_items:
            node.paths_to_sync = {}

        if node.paths_to_sync:
            for src, dest in node.paths_to_sync.items():
                if dest is True:
                    dest = src
                files_to_sync[src] = dest

        if 'bsm' in push_items and os.path.isdir('/opt/synergy/etc/bps'):
            files_to_sync['/opt/synergy/etc/bps'] = '/opt/synergy/etc'

        sync_list.append(
            (node, ssh_user, ssh_key, files_to_sync, dryrun)
        )

    # Make sure the ssh key files exist if specified
    non_existing_ssh_key_files = \
        [(node.name, ssh_file) for (node, _, ssh_file, _, _)
         in sync_list if ssh_file is not None
         and not os.file.exists(ssh_file)]
    if len(non_existing_ssh_key_files) > 0:
        for node, filename in non_existing_ssh_key_files:
            print 'ssh key %s for node %s could not be found!' \
                % (ssh_file, node)
        sys.exit(1)

    # Make sure the files to be synched actually exists locally
    non_existing_sync_files = \
        [(node.name, src) for (node, _, _, files, _) in sync_list
         for (src, _) in files.items() if not os.path.exists(src)]
    if len(non_existing_sync_files) > 0:
        for node, filename in non_existing_sync_files:
            print 'failed to sync file %s to %s, file does not exist' \
                % (filename, node)
        sys.exit(1)

    # Filter out masters as we don't want to push things upwards
    l = filter(lambda x: x[0].ntype != 'master', sync_list)

    num_threads = max(1, len(mconf.configured_nodes))
    p = Pool(num_threads)
    results = p.map(sync_files, l)

    for (res, out) in results:
        if out:
            print out

    exitval = 0
    if not all([ret for (ret, _) in results]):
        print 'Some error occured while synchronizing files!'
        exitval = 1

    if restart:
        results = p.map(restart_node, [node for (_, node) in wanted_nodes])
        for (res, out) in results:
            if out:
                print out
        if not all([ret for (ret, _) in results]):
            print 'Failed to restart all nodes'
            exitval = 1

    sys.exit(exitval)


def get_last_changed(files=False):
    if last_changed != 0:
        return last_changed

    if not files:
        files = grab_nagios_cfg(nagios_cfg)
    map(update_last_changed, files)

    return last_changed


def make_config_file_suitable_for_poller(lines):
    have_from_master_cfg = False
    from_master_config_line = "cfg_file=oconf/from-master.cfg"
    for i, line in enumerate(lines):
        if lines[i] == from_master_config_line:
            have_from_master_cfg = True
        elif lines[i].startswith("cfg_file=") \
                or lines[i].startswith("cfg_dir="):
                line = '#' + lines[i]
                lines[i] = line

    if not have_from_master_cfg:
        lines.append(from_master_config_line)
    return lines


def cmd_poller_fix(args=[]):
    """
    Fixes object configuration setup to be suitable for a poller.
    If this node is not a poller, no changes will be made.
    """
    global naemon_cfg
    global mconf
    have_master = False
    for name, node in mconf.configured_nodes.items():
        if node.ntype == 'master':
            have_master = True
            break
    if not have_master:
        return 0

    for arg in args:
        if os.path.isfile(arg):
            naemon_cfg = arg
        else:
            prettyprint_docstring('push', cmd_poller_fix.__doc__,
                                  'Unknown argument: %s' % arg)
            sys.exit(1)

    try:
        with open(naemon_cfg, 'r') as f:
            unchecked_lines = f.read().splitlines()

        fixed_lines = make_config_file_suitable_for_poller(unchecked_lines)

        with open(naemon_cfg, 'w') as f:
            f.write("\n".join(fixed_lines) + "\n")
    except Exception as e:
        print(" poller_fix: Error while modifying %s: %s" % (naemon_cfg, e))
        sys.exit(1)
