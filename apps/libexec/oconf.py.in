#!/usr/bin/env python


import os, sys, posix, re, copy, random
import subprocess

from compound_config import *
from merlin_apps_utils import *
from nagios_command import *

obj_index = {}
def idx_get(otype):
	global obj_index
	if not otype in obj_index.keys():
		obj_index[otype] = 0
	obj_index[otype] += 1
	return obj_index[otype]


nsplit_path = 'oconfsplit'
nsplit_helper_args = []
last_changed = 0
nagios_cfg = '/opt/monitor/etc/nagios.cfg'
object_cfg_files = {}
object_prefix = ''
object_cache = '/opt/monitor/var/objects.cache'
obj_files = []
cache_dir = '@cachedir@'
config_dir = cache_dir + '/config'

def module_init(args):
	rem_args = []
	for arg in args:
		if arg.startswith('--use-helper='):
			nsplit_path = arg.split('=', 1)[1]
			continue
		if arg == '--use-helper':
			continue
		if arg.startswith('--cache-dir='):
			config_dir = arg.split('=', 1)[1]
			continue
		rem_args.append(arg)
	return rem_args


# grab object configuration files from a cfg_dir directive
def recurse_grab_object_cfg_files(v, basepath=''):
	obj_files = []
	if v[0] != '/':
		v = basepath + '/' + v
	f_ary = os.listdir(v)
	for f in f_ary:
		path = '%s/%s' % (v, f)
		if os.path.isdir(path):
			obj_files += recurse_grab_object_cfg_files(path, '')
		elif os.path.isfile(path) and f[-4:] == '.cfg':
			obj_files.append(path)

	return obj_files

def grab_nagios_cfg(nagios_cfg_path):
	global force_include_commands
	global object_cache

	obj_files = []
	comp = parse_nagios_cfg(nagios_cfg_path)
	basepath = os.path.dirname(os.path.abspath(nagios_cfg_path))
	for (k, v) in comp.params:
		if k == 'cfg_file':
			obj_files.append(v)
		elif k == 'cfg_dir':
			obj_files += recurse_grab_object_cfg_files(v, basepath + '/')

	return obj_files


def update_last_changed(path):
	global last_changed
	st = os.stat(path)
	if st and st.st_mtime > last_changed:
		last_changed = st.st_mtime

# Run the nsplit helper in parallell for all targeted hostgroups
def run_splitter(params):
	splitters = {}
	started = 0
	reaped = 0
	errors = 0
	for p in params:
		outfile = p['file']
		groups = p['hostgroups']
		groups = ','.join(groups)
		cmd = [nsplit_path] + nsplit_helper_args + ['-q', '-o', outfile, '-g', groups]
		try:
			subp = subprocess.Popen(cmd, stdout=sys.stdout.fileno(), stderr=sys.stderr.fileno())
		except OSError, err:
			errors += 1
			print("Failed to launch '%s': %s" % (nsplit_path, err.strerror))
			break

		splitters[subp.pid] = outfile
		started += 1

	while reaped < started:
		(pid, status) = os.wait()
		if status != 0:
			print("process with pid %d exited with status %d" % (pid, status))
		else:
			os.utime(splitters[pid], (last_changed, last_changed))
			del(splitters[pid])
		reaped += 1

	if errors:
		sys.exit(1)


def usage(msg = False):
	if msg:
		print(msg)

	sys.exit(1)

def oconf_helper(args):
	app = merlin_dir + '/oconf'
	have_nagios_cfg = False
	for arg in args:
		if arg.startswith('--nagios-cfg'):
			have_nagios_cfg = True
			break
	if not have_nagios_cfg:
		args += ['--nagios-cfg=' + nagios_cfg]

	ret = os.spawnv(os.P_WAIT, app, [app] + args)
	if ret < 0:
		print("Helper %s was killed by signal %d" % (app, ret))
	return ret

def cmd_reload(args):
	"""[--unsafe] [</path/to/nagios>]
	Reloads object config by submitting an external command.
	"""
	global nagios_cfg
	safe = True
	bin = 'naemon'
	for arg in args:
		if arg == '--unsafe':
			safe = False
		elif arg == '--safe':
			safe = True
		elif arg.endswith('.cfg'):
			nagios_cfg = arg
		else:
			bin = arg

	color = ansi_color()

	if safe:
		cmd_args = [bin, '-v', nagios_cfg]
		ret = os.spawnvp(os.P_WAIT, bin, cmd_args)
		if ret != 0:
			print("\n%sConfig seems broken. Refusing to reload%s" % (color.red, color.reset))
			print("Testing command used:\n  %s" % ' '.join(cmd_args))
			sys.exit(ret)
		print("")

	comp = parse_nagios_cfg(nagios_cfg)
	ncmd = nagios_command('RESTART_PROCESS', comp.command_file)
	ret = ncmd.submit()
	if ret == False:
		print("%sConfig reload failed%s" % (color.red, color.reset))
		sys.exit(1)
	else:
		print("%sConfig reloaded OK%s" % (color.green, color.reset))

def cmd_hash(args):
	"""
	Prints an SHA-1 hash of the running configuration.
	"""
	sys.exit(oconf_helper(['hash'] + args))

def cmd_changed(args):
	"""
	Prints last modification time of all object configuration files.
	"""
	sys.exit(oconf_helper(['last-changed'] + args))

def cmd_files(args):
	"""
	Prints the configuration files in alphabetical order.
	"""
	sys.exit(oconf_helper(['files'] + args))

def cmd_split(args):
	"""<outfile:hostgroup1,hostgroup2,hostgroupN>
	Writes config for hostgroup1,hostgroup2 and hostgroupN into outfile.
	"""

	usg = "\n\nusage: split %s" % cmd_split.__doc__.split('\n', 1)[0]
	if len(args) == 0:
		usage("'split' requires arguments%s" % usg)

	argparams = []
	grab_nagios_cfg(nagios_cfg)

	for arg in args:
		# Ignore global arguments
		if arg.startswith('--'):
			continue

		# default case. outfile:hg1,hg2,hgN... argument
		ary = arg.split(':')
		if len(ary) != 2:
			usage("Unknown argument for split: %s%s" % (arg, usg))

		hgs = re.split('[\t ]*,[\t ]*', ary[1])
		argparams.append({'file': ary[0], 'hostgroups': hgs})

	if not len(argparams):
		return

	sys.exit(run_splitter(argparams))


def cmd_nodesplit(args):
	"""--use-helper --cache-dir --force [node1] [node2] [nodeN...]
	Same as 'split', but use merlin's config to split config into
	configuration files suitable for poller consumption.
	"""
	global cache_dir, config_dir
	global nsplit_path, nsplit_helper_args

	if not mconf.num_nodes['poller']:
		print("No pollers configured. No way to nodesplit config.")
		return True

	wanted_nodes = {}
	force = False
	nsplit_helper_args = []
	for arg in args:
		if arg.startswith('--use-helper='):
			nsplit_path = arg.split('=', 1)[1]
			continue
		if arg == '--use-helper':
			continue
		if arg.startswith('--cache-dir='):
			config_dir = arg.split('=', 1)[1]
			continue
		if arg == '--force':
			force = True
			nsplit_helper_args.append('-f')
			continue
		# check if it's a poller node
		node = mconf.configured_nodes.get(arg)
		if node and node.ntype == 'poller':
			wanted_nodes[node.name] = node
			continue
		# some random argument; so pass it to the helper
		nsplit_helper_args.append(arg)

	if not wanted_nodes:
		wanted_nodes = mconf.configured_nodes

	config_dir = cache_dir + '/config'
	mkdir_p(config_dir)

	get_last_changed()

	params = []
	hardlink = dict()
	to_create = dict()
	for node in mconf.sorted_nodes:
		name = node.name
		if node.ntype != 'poller':
			continue
		hostgroups = node.options.get('hostgroup', False)
		if not hostgroups:
			print("%s is a poller without hostgroups assigned to it." % name)
			print("Fix your config, please")
			sys.exit(1)

		node.oconf_file = '%s/%s.cfg' % (config_dir, name)

		# if there is another poller with identical hostgroups,
		# we really don't need to generate it anew for this one
		sorted_hostgroups = copy.copy(hostgroups)
		sorted_hostgroups.sort()
		sorted_hostgroups_str = ';'.join(sorted_hostgroups)
		cached = to_create.get(sorted_hostgroups_str, False)
		if cached != False:
			print("hardlink: %s" % node.oconf_file)
			hardlink[node.oconf_file] = cached
			continue
		to_create[sorted_hostgroups_str] = node.oconf_file

		# if there is a cached config file which is the same age
		# as the object config and we're not being forced, there's
		# no need to re-create it
		if not force and os.access(node.oconf_file, os.R_OK):
			st = os.stat(node.oconf_file)
			if int(st.st_mtime) == int(last_changed):
				print("%s is cached" % (node.oconf_file))
				continue
		params.append({'file': node.oconf_file, 'hostgroups': hostgroups})

	# If there are no pollers with hostgroups, we might as well
	# go home.
	if not len(params):
		print("No splitting to do. Quitting")
		return

	# now that we're done determining the minimum amount of
	# work we need to do, we run the oconfsplit helper to do
	# the heavy lifting for us

	# make sure files are created with the proper mode
	# for the target system
	old_umask = os.umask(002)
	run_splitter(params)

	# now create the hardlinks we know we need
	for (dst, src) in hardlink.items():
		print("Hardlinking\n     %s\n  to %s" % (src, dst))
		try:
			os.unlink(dst)
		except OSError:
			# file does not exist, likely, which is fine
			pass
		os.link(src, dst)


def get_ssh_key(node):
	ssh_key = node.options.get('oconf_ssh_key', False)
	if ssh_key and os.path.isfile(ssh_key):
		return ssh_key
	home = os.getenv('HOME', False)
	if not home:
		return False
	sshdir = home + "/.ssh"
	if not os.path.isdir(sshdir):
		return False

	# Try various keyfiles in the preferred order.
	# If we find one, we simply return 'true', since
	# ssh will look for the keys there too and may
	# choose one with better encryption (or whatever).
	for keyfile in ['id_rsa', 'id_dsa', 'identity']:
		if os.path.isfile(sshdir + '/' + keyfile):
			return True

	# no key seems to exist
	return False


def cmd_push(args):
	"""--no-restart [<node1> <node2> <nodeN>]
	Splits configuration based on merlin's peer and poller configuration
	and sends object configuration to all peers and pollers, restarting
	those that receive a configuration update.
	'mon oconf push' also supports all arguments that 'mon oconf nodesplit'
	handles, since any argument we don't understand get passed there.

	SSH keys needs to be set up for this to be usable without admin supervision.
	This command uses 'nodesplit' as its backend.
	"""
	errors = 0
	cmd_nodesplit(args)
	restart_nodes = {}
	wanted_nodes = []
	restart = True

	for arg in args:
		if arg == '--no-restart':
			restart = False
			continue
		node = mconf.configured_nodes.get(arg)
		if node:
			wanted_nodes.append((node.name, node))
			continue
		prettyprint_docstring('push', cmd_push.__doc__,
			'Unknown argument: %s' % arg)
		sys.exit(1)

	if not len(wanted_nodes):
		wanted_nodes = mconf.configured_nodes.items()

	# Copy recursively in 'archive' mode
	base_rsync_args = ['rsync', '-aotz', '--delete']
	base_rsync_args += ['-b', '--backup-dir=@cachedir@/backups']

	for name, node in wanted_nodes:
		# we don't push to master nodes
		if node.ntype == 'master':
			continue

		# Use compression by default
		ssh_cmd = 'ssh -C'

		if not node.oconf_file and node.ntype == 'poller':
			continue

		# now we set up source and destination. Pollers and peers
		# have different demands for this, and peers can be
		# configured to either transport only object configuration
		# (put it in a directory on its own and ship only objects)
		# or everything (ship /opt/monitor/etc to /opt/monitor)
		if node.ntype == 'poller':
			# pollers without an oconf_file are ignored
			if not node.oconf_file:
				continue
			source = node.oconf_file
			default_dest = '/opt/monitor/etc/oconf/from-master.cfg'
		else:
			source = node.options.get('oconf_source', '/opt/monitor/etc')
			default_dest = '/opt/monitor'

		oconf_dest = node.options.get('oconf_dest', default_dest)
		ssh_user = node.options.get('oconf_ssh_user', False)

		# XXX rewrite this to node.ssh_key(), always returning a path
		ssh_key = get_ssh_key(node)
		if ssh_key and ssh_key != True:
			if not os.path.isfile(ssh_key):
				print("ssh key '%s' for node '%s' not found" % (ssh_key, name))
				print("We can't push config without keys being properly set up")
				continue
			ssh_cmd += ' -i ' + ssh_key

		# if we're not running from console, we need to disable
		# keyboard-interactive authentication to avoid hanging
		if not os.isatty(sys.stdout.fileno()):
			ssh_cmd += ' -o KbdInteractiveAuthentication=no'

		if ssh_user:
			ssh_cmd += ' -l ' + ssh_user
		node.ssh_cmd = ssh_cmd

		address_dest = "%s:%s" % (node.address, oconf_dest)
		if ssh_user:
			address_dest = ssh_user + '@' + host_dest
		rsync_args = base_rsync_args + [source, '-e', ssh_cmd, address_dest]
		ret = os.spawnvp(os.P_WAIT, 'rsync', rsync_args)
		if ret != 0:
			print("rsync returned %d. Breakage?" % ret)
			print("Won't restart monitor and merlin on node '%s'" % name)
			errors += 1
			continue

		# XXX FIXME: ugly hack to get synergy rules
		# synchronized every once in a while
		if os.path.isdir('/opt/synergy/etc/bps'):
			if not node.paths_to_sync:
				node.paths_to_sync = {'/opt/synergy/etc/bps': '/opt/synergy/etc'}
			else:
				node.paths_to_sync['/opt/synergy/etc/bps'] = '/opt/synergy/etc'

		if node.paths_to_sync:
			for src, dest in node.paths_to_sync.items():
				if dest == True:
					dest = src
				address_dest = "%s:%s" % (node.address, dest)
				if ssh_user:
					address_dest = ssh_user + '@' + host_dest
				rsync_args = base_rsync_args + [src, '-e', node.ssh_cmd, address_dest]
				ret = os.spawnvp(os.P_WAIT, 'rsync', rsync_args)

		if restart and not node.ctrl("mon oconf reload"):
			print("Restart failed for node '%s'" % name)
			errors += 1

	# splitting, pushing and restarting is done. If there were
	# errors, we exit with non-zero exit status
	if errors:
		sys.exit(1)


def get_last_changed(files=False):
	if last_changed != 0:
		return last_changed

	if not files:
		files = grab_nagios_cfg(nagios_cfg)
	map(update_last_changed, files)

	return last_changed
